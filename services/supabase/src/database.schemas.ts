// Generated by ts-to-zod
import { z } from "zod";
import type { Json } from "./database.types";

/**
 * Shared ENUMs for consistent type safety
 */
export const ProjectRole = z.enum(["owner", "admin", "member"]);
export const ProjectStatus = z.enum(["active", "inactive", "completed"]);
export const UpdateType = z.enum([
  "milestone",
  "progress",
  "announcement",
  "general",
]);
export const UpdateStatus = z.enum(["draft", "published", "archived"]);

/**
 * Shared schema components for reuse
 */
const timestampFields = {
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
};

const userFields = {
  created_by: z.string().uuid(),
  updated_by: z.string().uuid(),
};

/**
 * Schema for kindler (user) data
 */
export const kindlersRowSchema = z.object({
  id: z.string().uuid(),
  auth_id: z.string().uuid(),
  username: z.string().min(3).max(100),
  email: z.string().email().max(255),
  display_name: z.string().max(255).nullable(),
  avatar_url: z.string().url().nullable(),
  bio: z.string().max(1000).nullable(),
  ...timestampFields,
});

export const kindlersInsertSchema = z.object({
  auth_id: z.string().uuid(),
  username: z.string().min(3).max(100),
  email: z.string().email().max(255),
  display_name: z.string().max(255).optional().nullable(),
  avatar_url: z.string().url().optional().nullable(),
  bio: z.string().max(1000).optional().nullable(),
  ...timestampFields,
});

export const kindlersUpdateSchema = z.object({
  auth_id: z.string().uuid().optional(),
  username: z.string().min(3).max(100).optional(),
  email: z.string().email().max(255).optional(),
  display_name: z.string().max(255).optional().nullable(),
  avatar_url: z.string().url().optional().nullable(),
  bio: z.string().max(1000).optional().nullable(),
  ...timestampFields,
});

export const kindlersRelationshipsSchema = z.tuple([]);

export const projectFollowersRowSchema = z.object({
  created_at: z.string().datetime(),
  id: z.string().uuid(),
  kindler_id: z.string().uuid(),
  project_id: z.string().uuid(),
});

export const projectFollowersInsertSchema = z.object({
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  kindler_id: z.string().uuid(),
  project_id: z.string().uuid(),
});

export const projectFollowersUpdateSchema = z.object({
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  kindler_id: z.string().uuid().optional(),
  project_id: z.string().uuid().optional(),
});

export const projectFollowersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("project_followers_kindler_id_fkey"),
    columns: z.tuple([z.literal("kindler_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("project_followers_project_id_fkey"),
    columns: z.tuple([z.literal("project_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("projects"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const projectMembersRowSchema = z.object({
  created_at: z.string().datetime(),
  id: z.string().uuid(),
  kindler_id: z.string().uuid(),
  project_id: z.string().uuid(),
  role: ProjectRole,
});

export const projectMembersInsertSchema = z.object({
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  kindler_id: z.string().uuid(),
  project_id: z.string().uuid(),
  role: ProjectRole,
});

export const projectMembersUpdateSchema = z.object({
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  kindler_id: z.string().uuid().optional(),
  project_id: z.string().uuid().optional(),
  role: ProjectRole.optional(),
});

export const projectMembersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("project_members_kindler_id_fkey"),
    columns: z.tuple([z.literal("kindler_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("project_members_project_id_fkey"),
    columns: z.tuple([z.literal("project_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("projects"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const projectUpdateCommentsRowSchema = z.object({
  content: z.string().min(1).max(10000),
  created_at: z.string().datetime(),
  id: z.string().uuid(),
  kindler_id: z.string().uuid(),
  update_id: z.string().uuid(),
  updated_at: z.string().datetime(),
});

export const projectUpdateCommentsInsertSchema = z.object({
  content: z.string().min(1).max(10000),
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  kindler_id: z.string().uuid(),
  update_id: z.string().uuid(),
  updated_at: z.string().datetime().optional(),
});

export const projectUpdateCommentsUpdateSchema = z.object({
  content: z.string().min(1).max(10000).optional(),
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  kindler_id: z.string().uuid().optional(),
  update_id: z.string().uuid().optional(),
  updated_at: z.string().datetime().optional(),
});

export const projectUpdateCommentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("project_update_comments_kindler_id_fkey"),
    columns: z.tuple([z.literal("kindler_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("project_update_comments_update_id_fkey"),
    columns: z.tuple([z.literal("update_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("project_updates"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const projectUpdateNotificationsRowSchema = z.object({
  created_at: z.string().datetime(),
  id: z.string().uuid(),
  is_read: z.boolean(),
  kindler_id: z.string().uuid(),
  update_id: z.string().uuid(),
});

export const projectUpdateNotificationsInsertSchema = z.object({
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  is_read: z.boolean().optional(),
  kindler_id: z.string().uuid(),
  update_id: z.string().uuid(),
});

export const projectUpdateNotificationsUpdateSchema = z.object({
  created_at: z.string().datetime().optional(),
  id: z.string().uuid().optional(),
  is_read: z.boolean().optional(),
  kindler_id: z.string().uuid().optional(),
  update_id: z.string().uuid().optional(),
});

export const projectUpdateNotificationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("project_update_notifications_kindler_id_fkey"),
    columns: z.tuple([z.literal("kindler_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("project_update_notifications_update_id_fkey"),
    columns: z.tuple([z.literal("update_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("project_updates"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

/**
 * Schema for project updates
 */
export const projectUpdatesRowSchema = z.object({
  id: z.string().uuid(),
  project_id: z.string().uuid(),
  parent_update_id: z.string().uuid().nullable(),
  title: z.string().min(1).max(255),
  content: z.string().min(1).max(10000),
  update_type: UpdateType,
  status: UpdateStatus,
  media_urls: z.array(z.string().url()).nullable(),
  ...timestampFields,
  ...userFields,
});

export const projectUpdatesInsertSchema = z.object({
  project_id: z.string().uuid(),
  parent_update_id: z.string().uuid().optional().nullable(),
  title: z.string().min(1).max(255),
  content: z.string().min(1).max(10000),
  update_type: UpdateType,
  status: UpdateStatus,
  media_urls: z.array(z.string().url()).optional().nullable(),
  ...timestampFields,
  ...userFields,
});

export const projectUpdatesUpdateSchema = z.object({
  project_id: z.string().uuid().optional(),
  parent_update_id: z.string().uuid().optional().nullable(),
  title: z.string().min(1).max(255).optional(),
  content: z.string().min(1).max(10000).optional(),
  update_type: UpdateType.optional(),
  status: UpdateStatus.optional(),
  media_urls: z.array(z.string().url()).optional().nullable(),
  ...timestampFields,
  ...userFields,
});

export const projectUpdatesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("project_updates_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("project_updates_project_id_fkey"),
    columns: z.tuple([z.literal("project_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("projects"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("project_updates_updated_by_fkey"),
    columns: z.tuple([z.literal("updated_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const projectsRowSchema = z.object({
  created_at: z.string().datetime(),
  created_by: z.string().uuid(),
  description: z.string().max(1000).nullable(),
  id: z.string().uuid(),
  name: z.string().min(1).max(255),
  status: ProjectStatus,
  updated_at: z.string().datetime(),
  updated_by: z.string().uuid(),
});

export const projectsInsertSchema = z.object({
  created_at: z.string().datetime().optional(),
  created_by: z.string().uuid(),
  description: z.string().max(1000).optional().nullable(),
  id: z.string().uuid().optional(),
  name: z.string().min(1).max(255),
  status: ProjectStatus.optional(),
  updated_at: z.string().datetime().optional(),
  updated_by: z.string().uuid(),
});

export const projectsUpdateSchema = z.object({
  created_at: z.string().datetime().optional(),
  created_by: z.string().uuid().optional(),
  description: z.string().max(1000).optional().nullable(),
  id: z.string().uuid().optional(),
  name: z.string().min(1).max(255).optional(),
  status: ProjectStatus.optional(),
  updated_at: z.string().datetime().optional(),
  updated_by: z.string().uuid().optional(),
});

export const projectsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("projects_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("projects_updated_by_fkey"),
    columns: z.tuple([z.literal("updated_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("kindlers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);
