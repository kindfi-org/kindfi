// Generated by ts-to-zod
import { z } from 'zod'
import type { Json } from './database.types'

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
	z
		.union([
			z.string(),
			z.number(),
			z.boolean(),
			z.record(z.union([jsonSchema, z.undefined()])),
			z.array(jsonSchema),
		])
		.nullable(),
)

export const categoriesRowSchema = z.object({
	color: z.string(),
	id: z.string(),
	name: z.string(),
	slug: z.string().nullable(),
})

export const categoriesInsertSchema = z.object({
	color: z.string(),
	id: z.string().optional(),
	name: z.string(),
	slug: z.string().optional().nullable(),
})

export const categoriesUpdateSchema = z.object({
	color: z.string().optional(),
	id: z.string().optional(),
	name: z.string().optional(),
	slug: z.string().optional().nullable(),
})

export const challengesRowSchema = z.object({
	challenge: z.string(),
	created_at: z.string(),
	expires_at: z.string(),
	id: z.string(),
	identifier: z.string(),
	rp_id: z.string(),
	user_id: z.string().nullable(),
})

export const challengesInsertSchema = z.object({
	challenge: z.string(),
	created_at: z.string().optional(),
	expires_at: z.string().optional(),
	id: z.string().optional(),
	identifier: z.string(),
	rp_id: z.string(),
	user_id: z.string().optional().nullable(),
})

export const challengesUpdateSchema = z.object({
	challenge: z.string().optional(),
	created_at: z.string().optional(),
	expires_at: z.string().optional(),
	id: z.string().optional(),
	identifier: z.string().optional(),
	rp_id: z.string().optional(),
	user_id: z.string().optional().nullable(),
})

export const commentTypeSchema = z.union([
	z.literal('comment'),
	z.literal('question'),
	z.literal('answer'),
])

export const commentsInsertSchema = z.object({
	author_id: z.string(),
	content: z.string(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	metadata: jsonSchema.optional(),
	parent_comment_id: z.string().optional().nullable(),
	project_id: z.string().optional().nullable(),
	project_update_id: z.string().optional().nullable(),
	type: commentTypeSchema.optional(),
	updated_at: z.string().optional().nullable(),
})

export const commentsUpdateSchema = z.object({
	author_id: z.string().optional(),
	content: z.string().optional(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	metadata: jsonSchema.optional(),
	parent_comment_id: z.string().optional().nullable(),
	project_id: z.string().optional().nullable(),
	project_update_id: z.string().optional().nullable(),
	type: commentTypeSchema.optional(),
	updated_at: z.string().optional().nullable(),
})

export const communityRowSchema = z.object({
	comment_id: z.string(),
	created_at: z.string().nullable(),
	id: z.string(),
	project_id: z.string(),
	update_id: z.string(),
})

export const communityInsertSchema = z.object({
	comment_id: z.string(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	project_id: z.string(),
	update_id: z.string(),
})

export const communityUpdateSchema = z.object({
	comment_id: z.string().optional(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	project_id: z.string().optional(),
	update_id: z.string().optional(),
})

export const contributionsRowSchema = z.object({
	amount: z.number(),
	contributor_id: z.string(),
	created_at: z.string().nullable(),
	id: z.string(),
	project_id: z.string(),
	updated_at: z.string().nullable(),
})

export const contributionsInsertSchema = z.object({
	amount: z.number(),
	contributor_id: z.string(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	project_id: z.string(),
	updated_at: z.string().optional().nullable(),
})

export const contributionsUpdateSchema = z.object({
	amount: z.number().optional(),
	contributor_id: z.string().optional(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	project_id: z.string().optional(),
	updated_at: z.string().optional().nullable(),
})

export const backupStateSchema = z.union([
	z.literal('not_backed_up'),
	z.literal('backed_up'),
])

export const deviceTypeSchema = z.union([
	z.literal('single_device'),
	z.literal('multi_device'),
])

export const profileVerificationStatusSchema = z.union([
	z.literal('unverified'),
	z.literal('verified'),
])

export const escrowStatusTypeSchema = z.union([
	z.literal('NEW'),
	z.literal('FUNDED'),
	z.literal('ACTIVE'),
	z.literal('COMPLETED'),
	z.literal('DISPUTED'),
	z.literal('CANCELLED'),
])

export const escrowContractsInsertSchema = z.object({
	amount: z.number(),
	completed_at: z.string().optional().nullable(),
	contract_id: z.string(),
	contribution_id: z.string(),
	created_at: z.string().optional().nullable(),
	current_state: escrowStatusTypeSchema.optional(),
	engagement_id: z.string(),
	id: z.string().optional(),
	metadata: jsonSchema.optional().nullable(),
	payer_address: z.string(),
	platform_fee: z.number(),
	project_id: z.string(),
	receiver_address: z.string(),
	updated_at: z.string().optional().nullable(),
})

export const escrowContractsUpdateSchema = z.object({
	amount: z.number().optional(),
	completed_at: z.string().optional().nullable(),
	contract_id: z.string().optional(),
	contribution_id: z.string().optional(),
	created_at: z.string().optional().nullable(),
	current_state: escrowStatusTypeSchema.optional(),
	engagement_id: z.string().optional(),
	id: z.string().optional(),
	metadata: jsonSchema.optional().nullable(),
	payer_address: z.string().optional(),
	platform_fee: z.number().optional(),
	project_id: z.string().optional(),
	receiver_address: z.string().optional(),
	updated_at: z.string().optional().nullable(),
})

export const escrowMilestonesRowSchema = z.object({
	escrow_id: z.string(),
	milestone_id: z.string(),
})

export const escrowMilestonesInsertSchema = z.object({
	escrow_id: z.string(),
	milestone_id: z.string(),
})

export const escrowMilestonesUpdateSchema = z.object({
	escrow_id: z.string().optional(),
	milestone_id: z.string().optional(),
})

export const escrowReviewsRowSchema = z.object({
	created_at: z.string().nullable(),
	disputer_id: z.string().nullable(),
	escrow_id: z.string(),
	evidence_urls: z.array(z.string()).nullable(),
	id: z.string(),
	milestone_id: z.string().nullable(),
	resolution_text: z.string().nullable(),
	review_notes: z.string().nullable(),
	reviewed_at: z.string().nullable(),
	reviewer_address: z.string(),
	status: z.string(),
	transaction_hash: z.string().nullable(),
	type: z.string(),
})

export const escrowReviewsInsertSchema = z.object({
	created_at: z.string().optional().nullable(),
	disputer_id: z.string().optional().nullable(),
	escrow_id: z.string(),
	evidence_urls: z.array(z.string()).optional().nullable(),
	id: z.string().optional(),
	milestone_id: z.string().optional().nullable(),
	resolution_text: z.string().optional().nullable(),
	review_notes: z.string().optional().nullable(),
	reviewed_at: z.string().optional().nullable(),
	reviewer_address: z.string(),
	status: z.string().optional(),
	transaction_hash: z.string().optional().nullable(),
	type: z.string(),
})

export const escrowReviewsUpdateSchema = z.object({
	created_at: z.string().optional().nullable(),
	disputer_id: z.string().optional().nullable(),
	escrow_id: z.string().optional(),
	evidence_urls: z.array(z.string()).optional().nullable(),
	id: z.string().optional(),
	milestone_id: z.string().optional().nullable(),
	resolution_text: z.string().optional().nullable(),
	review_notes: z.string().optional().nullable(),
	reviewed_at: z.string().optional().nullable(),
	reviewer_address: z.string().optional(),
	status: z.string().optional(),
	transaction_hash: z.string().optional().nullable(),
	type: z.string().optional(),
})

export const escrowStatusRowSchema = z.object({
	current_milestone: z.number().nullable(),
	escrow_id: z.string(),
	id: z.string(),
	last_updated: z.string().nullable(),
	metadata: jsonSchema.nullable(),
	status: escrowStatusTypeSchema,
	total_funded: z.number().nullable(),
	total_released: z.number().nullable(),
})

export const escrowStatusInsertSchema = z.object({
	current_milestone: z.number().optional().nullable(),
	escrow_id: z.string(),
	id: z.string().optional(),
	last_updated: z.string().optional().nullable(),
	metadata: jsonSchema.optional().nullable(),
	status: escrowStatusTypeSchema,
	total_funded: z.number().optional().nullable(),
	total_released: z.number().optional().nullable(),
})

export const escrowStatusUpdateSchema = z.object({
	current_milestone: z.number().optional().nullable(),
	escrow_id: z.string().optional(),
	id: z.string().optional(),
	last_updated: z.string().optional().nullable(),
	metadata: jsonSchema.optional().nullable(),
	status: escrowStatusTypeSchema.optional(),
	total_funded: z.number().optional().nullable(),
	total_released: z.number().optional().nullable(),
})

export const kindlerProjectsRowSchema = z.object({
	joined_at: z.string(),
	kindler_id: z.string(),
	project_id: z.string(),
})

export const kindlerProjectsInsertSchema = z.object({
	joined_at: z.string().optional(),
	kindler_id: z.string(),
	project_id: z.string(),
})

export const kindlerProjectsUpdateSchema = z.object({
	joined_at: z.string().optional(),
	kindler_id: z.string().optional(),
	project_id: z.string().optional(),
})

export const kycStatusEnumSchema = z.union([
	z.literal('pending'),
	z.literal('approved'),
	z.literal('rejected'),
	z.literal('verified'),
])

export const kycReviewsInsertSchema = z.object({
	additional_notes: z.string().optional().nullable(),
	created_at: z.string().optional(),
	decision: kycStatusEnumSchema,
	id: z.string().optional(),
	kyc_status_id: z.string(),
	reason: z.string().optional().nullable(),
	review_notes: z.string().optional().nullable(),
	reviewer_id: z.string(),
	updated_at: z.string().optional(),
})

export const kycReviewsUpdateSchema = z.object({
	additional_notes: z.string().optional().nullable(),
	created_at: z.string().optional(),
	decision: kycStatusEnumSchema.optional(),
	id: z.string().optional(),
	kyc_status_id: z.string().optional(),
	reason: z.string().optional().nullable(),
	review_notes: z.string().optional().nullable(),
	reviewer_id: z.string().optional(),
	updated_at: z.string().optional(),
})

export const kycVerificationEnumSchema = z.union([
	z.literal('basic'),
	z.literal('enhanced'),
])

export const kycStatusInsertSchema = z.object({
	created_at: z.string().optional(),
	id: z.string().optional(),
	status: kycStatusEnumSchema.optional(),
	updated_at: z.string().optional(),
	user_id: z.string(),
	verification_level: kycVerificationEnumSchema.optional(),
})

export const kycStatusUpdateSchema = z.object({
	created_at: z.string().optional(),
	id: z.string().optional(),
	status: kycStatusEnumSchema.optional(),
	updated_at: z.string().optional(),
	user_id: z.string().optional(),
	verification_level: kycVerificationEnumSchema.optional(),
})

export const milestoneStatusSchema = z.union([
	z.literal('pending'),
	z.literal('completed'),
	z.literal('approved'),
	z.literal('rejected'),
	z.literal('disputed'),
])

export const milestonesInsertSchema = z.object({
	amount: z.number(),
	completed_at: z.string().optional().nullable(),
	created_at: z.string().optional().nullable(),
	deadline: z.string(),
	description: z.string().optional().nullable(),
	id: z.string().optional(),
	order_index: z.number(),
	project_id: z.string(),
	status: milestoneStatusSchema.optional(),
	title: z.string(),
})

export const milestonesUpdateSchema = z.object({
	amount: z.number().optional(),
	completed_at: z.string().optional().nullable(),
	created_at: z.string().optional().nullable(),
	deadline: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.string().optional(),
	order_index: z.number().optional(),
	project_id: z.string().optional(),
	status: milestoneStatusSchema.optional(),
	title: z.string().optional(),
})

export const notificationPreferencesRowSchema = z.object({
	created_at: z.string().nullable(),
	email: z.boolean().nullable(),
	in_app: z.boolean().nullable(),
	push: z.boolean().nullable(),
	updated_at: z.string().nullable(),
	user_id: z.string(),
})

export const notificationPreferencesInsertSchema = z.object({
	created_at: z.string().optional().nullable(),
	email: z.boolean().optional().nullable(),
	in_app: z.boolean().optional().nullable(),
	push: z.boolean().optional().nullable(),
	updated_at: z.string().optional().nullable(),
	user_id: z.string(),
})

export const notificationPreferencesUpdateSchema = z.object({
	created_at: z.string().optional().nullable(),
	email: z.boolean().optional().nullable(),
	in_app: z.boolean().optional().nullable(),
	push: z.boolean().optional().nullable(),
	updated_at: z.string().optional().nullable(),
	user_id: z.string().optional(),
})

export const notificationDeliveryStatusSchema = z.union([
	z.literal('pending'),
	z.literal('delivered'),
	z.literal('failed'),
])

export const notificationPrioritySchema = z.union([
	z.literal('low'),
	z.literal('medium'),
	z.literal('high'),
	z.literal('urgent'),
])

export const notificationTypeSchema = z.union([
	z.literal('info'),
	z.literal('success'),
	z.literal('warning'),
	z.literal('error'),
])

export const notificationsInsertSchema = z.object({
	body: z.string(),
	created_at: z.string().optional().nullable(),
	data: jsonSchema.optional().nullable(),
	delivery_attempts: z.number().optional().nullable(),
	delivery_status: notificationDeliveryStatusSchema.optional().nullable(),
	expires_at: z.string().optional().nullable(),
	id: z.string().optional(),
	is_read: z.boolean().optional().nullable(),
	metadata: jsonSchema.optional().nullable(),
	next_retry_at: z.string().optional().nullable(),
	priority: notificationPrioritySchema.optional(),
	title: z.string(),
	type: notificationTypeSchema.optional(),
	updated_at: z.string().optional().nullable(),
	user_id: z.string(),
})

export const notificationsUpdateSchema = z.object({
	body: z.string().optional(),
	created_at: z.string().optional().nullable(),
	data: jsonSchema.optional().nullable(),
	delivery_attempts: z.number().optional().nullable(),
	delivery_status: notificationDeliveryStatusSchema.optional().nullable(),
	expires_at: z.string().optional().nullable(),
	id: z.string().optional(),
	is_read: z.boolean().optional().nullable(),
	metadata: jsonSchema.optional().nullable(),
	next_retry_at: z.string().optional().nullable(),
	priority: notificationPrioritySchema.optional(),
	title: z.string().optional(),
	type: notificationTypeSchema.optional(),
	updated_at: z.string().optional().nullable(),
	user_id: z.string().optional(),
})

export const userRoleSchema = z.union([
	z.literal('kinder'),
	z.literal('kindler'),
])

export const profilesInsertSchema = z.object({
	bio: z.string().optional().nullable(),
	created_at: z.string().optional(),
	display_name: z.string().optional(),
	email: z.string().optional().nullable(),
	id: z.string(),
	image_url: z.string().optional().nullable(),
	role: userRoleSchema.optional(),
	updated_at: z.string().optional(),
})

export const profilesUpdateSchema = z.object({
	bio: z.string().optional().nullable(),
	created_at: z.string().optional(),
	display_name: z.string().optional(),
	email: z.string().optional().nullable(),
	id: z.string().optional(),
	image_url: z.string().optional().nullable(),
	role: userRoleSchema.optional(),
	updated_at: z.string().optional(),
})

export const projectMemberRoleSchema = z.union([
	z.literal('admin'),
	z.literal('editor'),
	z.literal('advisor'),
	z.literal('community'),
	z.literal('core'),
	z.literal('others'),
])

export const projectMembersInsertSchema = z.object({
	id: z.string().optional(),
	joined_at: z.string().optional(),
	project_id: z.string(),
	role: projectMemberRoleSchema.optional(),
	title: z.string().optional(),
	updated_at: z.string().optional(),
	user_id: z.string(),
})

export const projectMembersUpdateSchema = z.object({
	id: z.string().optional(),
	joined_at: z.string().optional(),
	project_id: z.string().optional(),
	role: projectMemberRoleSchema.optional(),
	title: z.string().optional(),
	updated_at: z.string().optional(),
	user_id: z.string().optional(),
})

export const projectPitchRowSchema = z.object({
	created_at: z.string().nullable(),
	id: z.string(),
	pitch_deck: z.string().nullable(),
	project_id: z.string(),
	story: z.string().nullable(),
	title: z.string(),
	updated_at: z.string().nullable(),
	video_url: z.string().nullable(),
})

export const projectPitchInsertSchema = z.object({
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	pitch_deck: z.string().optional().nullable(),
	project_id: z.string(),
	story: z.string().optional().nullable(),
	title: z.string(),
	updated_at: z.string().optional().nullable(),
	video_url: z.string().optional().nullable(),
})

export const projectPitchUpdateSchema = z.object({
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	pitch_deck: z.string().optional().nullable(),
	project_id: z.string().optional(),
	story: z.string().optional().nullable(),
	title: z.string().optional(),
	updated_at: z.string().optional().nullable(),
	video_url: z.string().optional().nullable(),
})

export const projectTagRelationshipsRowSchema = z.object({
	project_id: z.string(),
	tag_id: z.string(),
})

export const projectTagRelationshipsInsertSchema = z.object({
	project_id: z.string(),
	tag_id: z.string(),
})

export const projectTagRelationshipsUpdateSchema = z.object({
	project_id: z.string().optional(),
	tag_id: z.string().optional(),
})

export const projectTagsRowSchema = z.object({
	color: z.string(),
	created_at: z.string().nullable(),
	id: z.string(),
	name: z.string(),
	updated_at: z.string().nullable(),
})

export const projectTagsInsertSchema = z.object({
	color: z.string(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	name: z.string(),
	updated_at: z.string().optional().nullable(),
})

export const projectTagsUpdateSchema = z.object({
	color: z.string().optional(),
	created_at: z.string().optional().nullable(),
	id: z.string().optional(),
	name: z.string().optional(),
	updated_at: z.string().optional().nullable(),
})

export const projectUpdatesRowSchema = z.object({
	author_id: z.string(),
	content: z.string(),
	created_at: z.string(),
	id: z.string(),
	project_id: z.string(),
	title: z.string(),
	updated_at: z.string(),
})

export const projectUpdatesInsertSchema = z.object({
	author_id: z.string(),
	content: z.string(),
	created_at: z.string().optional(),
	id: z.string().optional(),
	project_id: z.string(),
	title: z.string(),
	updated_at: z.string().optional(),
})

export const projectUpdatesUpdateSchema = z.object({
	author_id: z.string().optional(),
	content: z.string().optional(),
	created_at: z.string().optional(),
	id: z.string().optional(),
	project_id: z.string().optional(),
	title: z.string().optional(),
	updated_at: z.string().optional(),
})

export const projectsRowSchema = z.object({
	category_id: z.string().nullable(),
	created_at: z.string().nullable(),
	current_amount: z.number(),
	description: z.string().nullable(),
	id: z.string(),
	image_url: z.string().nullable(),
	kinder_count: z.number(),
	min_investment: z.number(),
	owner_id: z.string(),
	percentage_complete: z.number(),
	project_location: z.string().nullable(),
	slug: z.string(),
	social_links: jsonSchema,
	target_amount: z.number(),
	title: z.string(),
	updated_at: z.string().nullable(),
})

export const projectsInsertSchema = z.object({
	category_id: z.string().optional().nullable(),
	created_at: z.string().optional().nullable(),
	current_amount: z.number().optional(),
	description: z.string().optional().nullable(),
	id: z.string().optional(),
	image_url: z.string().optional().nullable(),
	kinder_count: z.number().optional(),
	min_investment: z.number(),
	owner_id: z.string(),
	percentage_complete: z.number().optional(),
	project_location: z.string().optional().nullable(),
	slug: z.string(),
	social_links: jsonSchema.optional(),
	target_amount: z.number(),
	title: z.string(),
	updated_at: z.string().optional().nullable(),
})

export const projectsUpdateSchema = z.object({
	category_id: z.string().optional().nullable(),
	created_at: z.string().optional().nullable(),
	current_amount: z.number().optional(),
	description: z.string().optional().nullable(),
	id: z.string().optional(),
	image_url: z.string().optional().nullable(),
	kinder_count: z.number().optional(),
	min_investment: z.number().optional(),
	owner_id: z.string().optional(),
	percentage_complete: z.number().optional(),
	project_location: z.string().optional().nullable(),
	slug: z.string().optional(),
	social_links: jsonSchema.optional(),
	target_amount: z.number().optional(),
	title: z.string().optional(),
	updated_at: z.string().optional().nullable(),
})

export const commentsRowSchema = z.object({
	author_id: z.string(),
	content: z.string(),
	created_at: z.string().nullable(),
	id: z.string(),
	metadata: jsonSchema,
	parent_comment_id: z.string().nullable(),
	project_id: z.string().nullable(),
	project_update_id: z.string().nullable(),
	type: commentTypeSchema,
	updated_at: z.string().nullable(),
})

export const escrowContractsRowSchema = z.object({
	amount: z.number(),
	completed_at: z.string().nullable(),
	contract_id: z.string(),
	contribution_id: z.string(),
	created_at: z.string().nullable(),
	current_state: escrowStatusTypeSchema,
	engagement_id: z.string(),
	id: z.string(),
	metadata: jsonSchema.nullable(),
	payer_address: z.string(),
	platform_fee: z.number(),
	project_id: z.string(),
	receiver_address: z.string(),
	updated_at: z.string().nullable(),
})

export const kycReviewsRowSchema = z.object({
	additional_notes: z.string().nullable(),
	created_at: z.string(),
	decision: kycStatusEnumSchema,
	id: z.string(),
	kyc_status_id: z.string(),
	reason: z.string().nullable(),
	review_notes: z.string().nullable(),
	reviewer_id: z.string(),
	updated_at: z.string(),
})

export const kycStatusRowSchema = z.object({
	created_at: z.string(),
	id: z.string(),
	status: kycStatusEnumSchema,
	updated_at: z.string(),
	user_id: z.string(),
	verification_level: kycVerificationEnumSchema,
})

export const milestonesRowSchema = z.object({
	amount: z.number(),
	completed_at: z.string().nullable(),
	created_at: z.string().nullable(),
	deadline: z.string(),
	description: z.string().nullable(),
	id: z.string(),
	order_index: z.number(),
	project_id: z.string(),
	status: milestoneStatusSchema,
	title: z.string(),
})

export const notificationsRowSchema = z.object({
	body: z.string(),
	created_at: z.string().nullable(),
	data: jsonSchema.nullable(),
	delivery_attempts: z.number().nullable(),
	delivery_status: notificationDeliveryStatusSchema.nullable(),
	expires_at: z.string().nullable(),
	id: z.string(),
	is_read: z.boolean().nullable(),
	metadata: jsonSchema.nullable(),
	next_retry_at: z.string().nullable(),
	priority: notificationPrioritySchema,
	title: z.string(),
	type: notificationTypeSchema,
	updated_at: z.string().nullable(),
	user_id: z.string(),
})

export const profilesRowSchema = z.object({
	bio: z.string().nullable(),
	created_at: z.string(),
	display_name: z.string(),
	email: z.string().nullable(),
	id: z.string(),
	image_url: z.string().nullable(),
	role: userRoleSchema,
	updated_at: z.string(),
})

export const projectMembersRowSchema = z.object({
	id: z.string(),
	joined_at: z.string(),
	project_id: z.string(),
	role: projectMemberRoleSchema,
	title: z.string(),
	updated_at: z.string(),
	user_id: z.string(),
})
